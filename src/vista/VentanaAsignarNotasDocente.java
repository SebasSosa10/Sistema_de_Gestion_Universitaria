package vista;

import Exepciones.NotaMayorExepcion;
import Exepciones.NotaMenorExepcion;
import Exepciones.YaSeCalificoLaNotaExepcion;
import Util.IList;
import Util.Lista;
import controladores.ControladorAsignarNotas;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import modelo.Curso;
import modelo.DetalleNota;
import modelo.Estudiante;
import modelo.Nota;
import modelo.Usuario;

/**
 *
 * @author JOAN
 */
public class VentanaAsignarNotasDocente extends javax.swing.JFrame {

    ControladorAsignarNotas controlador;
    IList<DetalleNota> listaDetalle;
    Usuario usuario;

    public VentanaAsignarNotasDocente(Usuario usuario) {
        initComponents();
        this.usuario = usuario;
        this.controlador = new ControladorAsignarNotas();
        LlenarCurso();
        setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jSeparator4 = new javax.swing.JSeparator();
        btnGuardar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        cbxCurso = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaNota = new javax.swing.JTable();
        cbxEstudiante = new javax.swing.JComboBox<>();
        cbxnotas = new javax.swing.JComboBox<>();
        btnAtras = new javax.swing.JButton();
        txtNota = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "NOTAS DEL CURSO", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 3, 18), new java.awt.Color(0, 0, 0))); // NOI18N
        jPanel3.setForeground(new java.awt.Color(0, 0, 0));

        jSeparator4.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator4.setForeground(new java.awt.Color(0, 0, 0));

        btnGuardar.setBackground(new java.awt.Color(204, 255, 204));
        btnGuardar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnGuardar.setForeground(new java.awt.Color(0, 0, 0));
        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Guardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnModificar.setBackground(new java.awt.Color(153, 153, 153));
        btnModificar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnModificar.setForeground(new java.awt.Color(0, 0, 0));
        btnModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Modificar.png"))); // NOI18N
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        cbxCurso.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxCursoItemStateChanged(evt);
            }
        });

        tablaNota.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaNota.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tablaNotaMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tablaNota);

        cbxnotas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxnotasItemStateChanged(evt);
            }
        });

        btnAtras.setBackground(new java.awt.Color(204, 204, 204));
        btnAtras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Atras.png"))); // NOI18N
        btnAtras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtrasActionPerformed(evt);
            }
        });

        txtNota.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNotaKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(cbxEstudiante, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                            .addComponent(txtNota)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 563, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(cbxCurso, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbxnotas, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnAtras)))
                .addContainerGap(54, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnModificar))
                .addGap(254, 254, 254))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxnotas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbxEstudiante, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(btnAtras, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 643, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 613, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        try {
            if (CamposVacios()) {
                double valor = Double.parseDouble(txtNota.getText());
                if (valor < 0 || valor > 5) {
                    JOptionPane.showMessageDialog(null, "El valor debe estar entre 0 y 5");
                    return;
                }
                Nota nota = (Nota) cbxnotas.getSelectedItem();
                Curso curso = (Curso) cbxCurso.getSelectedItem();
                Estudiante estudiante = (Estudiante) cbxEstudiante.getSelectedItem();
                if (nota != null) {
                    if (curso != null) {
                        if (estudiante != null) {
                            controlador.guardarNota(curso, nota, valor, estudiante);
                            JOptionPane.showMessageDialog(null, "la calificacion quedo guardada");
                            actualizarTabla(curso, nota);
                            limpiar();
                        } else {
                            JOptionPane.showMessageDialog(null, "todavia no han asignado estudiantes al curso");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "no tiene curso asignado");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "todavia no ha asignado nota");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Favor no dejar Campos VACIOS");
            }
        } catch (NotaMayorExepcion | NotaMenorExepcion | YaSeCalificoLaNotaExepcion exp) {
            JOptionPane.showMessageDialog(null, exp.getMessage());
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        try {
            if (CamposVacios()) {
                double valor = Double.parseDouble(txtNota.getText());
                if (valor < 0 || valor > 5) {
                    JOptionPane.showMessageDialog(null, "El valor debe estar entre 0 y 5");
                    return;
                }
                Nota nota = (Nota) cbxnotas.getSelectedItem();
                Curso curso = (Curso) cbxCurso.getSelectedItem();
                Estudiante estudiante = (Estudiante) cbxEstudiante.getSelectedItem();
                if (nota != null) {
                    if (curso != null) {
                        if (estudiante != null) {
                            controlador.guardarNota(curso, nota, valor, estudiante);
                            JOptionPane.showMessageDialog(null, "la calificacion se modifico");
                            actualizarTabla(curso, nota);
                            limpiar();
                        } else {
                            JOptionPane.showMessageDialog(null, "todavia no han asignado estudiantes al curso");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "no tiene curso asignado");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "todavia no ha asignado nota");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Favor no dejar Campos VACIOS");
            }
        } catch (NotaMayorExepcion | NotaMenorExepcion | YaSeCalificoLaNotaExepcion exp) {
            JOptionPane.showMessageDialog(null, exp.getMessage());
        }
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnAtrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtrasActionPerformed
        VentanaDocente ventana = new VentanaDocente(usuario);
        ventana.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnAtrasActionPerformed

    private void cbxCursoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxCursoItemStateChanged
        Curso curso = (Curso) cbxCurso.getSelectedItem();
        llenarNota(curso);
        llenarEstudiante(curso);

    }//GEN-LAST:event_cbxCursoItemStateChanged

    private void cbxnotasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxnotasItemStateChanged
        Nota nota = (Nota) cbxnotas.getSelectedItem();
        actualizarTabla((Curso) cbxCurso.getSelectedItem(), nota);
    }//GEN-LAST:event_cbxnotasItemStateChanged

    private void txtNotaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNotaKeyTyped
        char c = evt.getKeyChar();
        if ((c < '0' || c > '9') && c != '.' || txtNota.getText().length() >= 4) {
            evt.consume();
        }
    }//GEN-LAST:event_txtNotaKeyTyped

    private void tablaNotaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaNotaMousePressed
        try {
            int filaSeleccionada = tablaNota.getSelectedRow();
            if (filaSeleccionada != -1) {
                double porcentaje = (double) tablaNota.getValueAt(filaSeleccionada, 1);
                txtNota.setText(String.valueOf(porcentaje));
            }
        } catch (Exception exp) {
            exp.printStackTrace();
        }
    }//GEN-LAST:event_tablaNotaMousePressed

    private void LlenarCurso() {
        cbxCurso.removeAllItems();
        IList<Curso> listaCurso = controlador.getListaCurso();
        if (listaCurso != null) {
            for (int i = 0; i < listaCurso.size(); i++) {
                cbxCurso.addItem(listaCurso.get(i));
            }
        }
    }

    private void llenarNota(Curso curso) {
        cbxnotas.removeAllItems();
        IList<Nota> listaNotas = curso.getListaNotas();
        for (int i = 0; i < listaNotas.size(); i++) {
            cbxnotas.addItem(listaNotas.get(i));
        }
    }

    private void llenarEstudiante(Curso curso) {
        cbxEstudiante.removeAllItems();
        IList<Estudiante> listaEstudiante = curso.getListaEstudiates();
        for (int i = 0; i < listaEstudiante.size(); i++) {
            cbxEstudiante.addItem(listaEstudiante.get(i));
        }
    }

    private void limpiar() {
        txtNota.setText("");
    }

    public boolean CamposVacios() {
        if (txtNota.getText().isEmpty()) {
            return false;
        } else {
            return true;
        }
    }

    private void actualizarTabla(Curso curso, Nota nota) {
        listaDetalle = new Lista<>();
        for (int i = 0; i < controlador.getListaCurso().size(); i++) {
            if (controlador.getListaCurso().get(i).getCodigoCurso().equals(curso.getCodigoCurso())) {
                for (int j = 0; j < controlador.getListaCurso().get(i).getListaNotas().size(); j++) {
                    if (nota.getDescripcion().equals(controlador.getListaCurso().get(i).getListaNotas().get(j).getDescripcion())) {
                        for (int k = 0; k < controlador.getListaCurso().get(i).getListaNotas().get(j).getListaDetalle().size(); k++) {
                            listaDetalle.add(controlador.getListaCurso().get(i).getListaNotas().get(j).getListaDetalle().get(k));
                        }
                    }
                }
            }
        }
        DefaultTableModel modelo = new DefaultTableModel(new String[]{"ESTUDIANTE", "NOTA", "CALIFICADO"},
                listaDetalle.size());
        tablaNota.setModel(modelo);
        TableModel modeloDatos = tablaNota.getModel();
        for (int i = 0; i < listaDetalle.size(); i++) {
            String calificado = "No calificado";
            if (listaDetalle.get(i).isCalifacdo()) {
                calificado = "calificado";
            }
            DetalleNota aux = listaDetalle.get(i);
            modeloDatos.setValueAt(aux.getEstudiante().getNombre(), i, 0);
            modeloDatos.setValueAt(aux.getValor(), i, 1);
            modeloDatos.setValueAt(calificado, i, 2);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtras;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JComboBox<Curso> cbxCurso;
    private javax.swing.JComboBox<Estudiante> cbxEstudiante;
    private javax.swing.JComboBox<Nota> cbxnotas;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTable tablaNota;
    private javax.swing.JTextField txtNota;
    // End of variables declaration//GEN-END:variables
}
